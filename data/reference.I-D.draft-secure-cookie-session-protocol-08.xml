<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='I-D.secure-cookie-session-protocol'>
<front>
<title>SCS: Secure Cookie Sessions for HTTP</title>

<author initials='S' surname='Barbato' fullname='Stefano Barbato'>
    <organization />
</author>

<author initials='S' surname='Dorigotti' fullname='Steven Dorigotti'>
    <organization />
</author>

<author initials='T' surname='Fossati' fullname='Thomas Fossati'>
    <organization />
</author>

<date month='October' day='9' year='2012' />

<abstract><t>This document provides an overview of SCS, a small cryptographic protocol layered on top of the HTTP cookie facility, that allows its users to produce and consume authenticated and encrypted cookies, as opposed to usual cookies, which are un-authenticated and sent in clear text.  An interesting property, rising naturally from the given confidentiality and authentication properties, is that by using SCS cookies, it is possible to avoid storing the session state material on the server side altogether.  In fact, an SCS cookie presented by the user agent to the origin server can always be validated (i.e. possibly recognized as self-produced, fresh, untampered material) and, as such, be used to safely restore application state.  Hence, typical use cases may include devices with little or no storage offering some functionality via an HTTP interface, as well as web applications with high availability or load balancing requirements which would prefer to handle application state without the need to synchronize the pool through shared storage or peering.  Another noteworthy application scenario is represented by the distribution of authorized web content (e.g. by CDNs), where an SCS token can be used, either in a cookie or embedded in the URI, to provide evidence of the entitlement to access the associated resource by the requesting user agent.  Nevertheless, its security properties allow SCS to be used whenever the privacy and integrity of cookies is a concern, by paying an affordable price in terms of increased cookie size, additional CPU clock cycles needed by the symmetric key encryption and HMAC algorithms, and related key management, which can be made a nearly transparent task.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-secure-cookie-session-protocol-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-secure-cookie-session-protocol-08.txt' />
</reference>
